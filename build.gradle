plugins {
    id 'groovy'
    id 'maven-publish'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'net.minecraftforge.gradle' version '5.1.+'
    id 'org.cadixdev.licenser' version '0.6.1'
}

static String getGitCommit() {
    def proc = 'git rev-parse --short HEAD'.execute()
    proc.waitFor()
    return proc.exitValue()? "ERROR(${proc.exitValue()})" : proc.text.trim()
}

def groovy(def name) {
    return [
            group: 'org.codehaus.groovy',
            name: name == 'stdlib'? 'groovy' : "groovy-${name}",
            version: project.ext.groovyVersion,
            classifier: 'indy'
    ]
}

version = '1.0.0'
group = 'net.thesilkminer.mc.austinpowers'
archivesBaseName = 'austin-powers-language-provider-keeping-it-groovy-baby'

java {
    toolchain.languageVersion = JavaLanguageVersion.of(JavaVersion.VERSION_17.majorVersion)
}

license {
    header(project.file('NOTICE'))

    ext['year'] = Calendar.getInstance().get(Calendar.YEAR)
    ext['name'] = 'TheSilkMiner'
    ext['app'] = 'APLP: KIGB'
}

minecraft {
    mappings channel: 'official', version: '1.18.1'

    runs {
        client {
            workingDirectory project.file('run_client')

            property 'forge.logging.console.level', 'debug'

            lazyToken('minecraft_classpath') {
                configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }

            mods {
                austinpowerslanguageproviderkeepingitgroovybaby {
                    source sourceSets.main
                }
                mojotest {
                    source sourceSets.test
                }
            }
        }

        server {
            workingDirectory project.file('run_server')

            property 'forge.logging.console.level', 'debug'

            args 'nogui'

            lazyToken('minecraft_classpath') {
                configurations.shade.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
            }

            mods {
                austinpowerslanguageproviderkeepingitgroovybaby {
                    source sourceSets.main
                }
                mojotest {
                    source sourceSets.test
                }
            }
        }
    }
}

configurations {
    shade {}
    yeet {}
    implementation.extendsFrom(shade)
}

repositories {
    mavenCentral()
}

dependencies {
    minecraft group: 'net.minecraftforge', name: 'forge', version: '1.18.1-39.0.88'
    shade groovy('stdlib')
    shade groovy('ant')
    shade groovy('astbuilder')
    yeet groovy('backports-compat-23')
    yeet groovy('binary')
    yeet groovy('bom')
    yeet groovy('bsf')
    shade groovy('cli-picocli')
    yeet groovy('cli-commons')
    shade groovy('contracts')
    yeet groovy('console')
    shade groovy('datetime')
    shade groovy('dateutil')
    yeet groovy('docgenerator')
    yeet groovy('ginq')
    yeet groovy('groovydoc')
    yeet groovy('groovysh')
    yeet groovy('jaxb')
    yeet groovy('jmx')
    shade groovy('json')
    shade groovy('jsr223')
    shade groovy('macro')
    shade groovy('macro-library')
    shade groovy('nio')
    yeet groovy('servlet')
    yeet groovy('sql')
    yeet groovy('swing')
    shade groovy('templates')
    shade groovy('test')
    shade groovy('test-junit5')
    yeet groovy('testng')
    shade groovy('toml')
    shade groovy('typecheckers')
    shade groovy('xml')
    shade groovy('yaml')
}

jar {
    archiveClassifier = 'thin'
    manifest {
        attributes([
            "Specification-Title": "austin-powers-language-provider-keeping-it-groovy-baby",
            "Specification-Vendor": "TheSilkMiner",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": archiveVersion.get(),
            "Implementation-Vendor" : "TheSilkMiner",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "GitCommit": getGitCommit(),
            "FMLModType": "LANGPROVIDER",
            "Automatic-Module-Name": "net.thesilkminer.mc.aplpkigb"
        ])
    }
}

shadowJar {
    archiveClassifier = ''
    configurations = [project.configurations.shade]
}

task testJar(type: Jar) {
    from sourceSets.test.output
    archiveClassifier = 'test'
}

reobf {
    shadowJar {}
    testJar {}
}

tasks.withType(GroovyCompile).configureEach {
    groovyOptions.optimizationOptions.indy = true
}

jar.finalizedBy('reobfJar')
shadowJar.finalizedBy('reobfShadowJar')
testJar.finalizedBy('reobfTestJar')

shadowJar.dependsOn('reobfJar')
testJar.dependsOn('shadowJar')
build.dependsOn('testJar')

wrapper {
    gradleVersion = '7.4'
    distributionType = Wrapper.DistributionType.ALL
}
